#!/bin/sh

readonly PROGRAM="${0##*/}" SPACE=' ' TAB='	' NL='
'
readonly DEFAULT_IFS="${SPACE}${TAB}${NL}"

IFS="$DEFAULT_IFS"

Error() { printf "$@" >&2; exit 1; }

input_file=
start_position=
end_position=
rotate_video=
assume_yes=
while getopts ':i:s:t:r:y' user_input
do
	case "$user_input" in
		(i) input_file="${OPTARG:-NULL}" ;;
		(s) start_position="${OPTARG:-NULL}";;
		(t) end_position="${OPTARG:-NULL}";;
		(r) rotate_video="${OPTARG:-NULL}" ;;
		(y) assume_yes="true" ;;
		(:) Error '%s: option requires an argument -- %c\n' "$PROGRAM" "$OPTARG" ;;
		(\?) Error '%s: illegal argument -- %c\n' "$PROGRAM" "$OPTARG" ;;
	esac
done
shift $((OPTIND - 1))

case $# in
	(0)
		output_directory="$(pwd)"
		;;
	(1)
		test -n "$1" || Error '%s: directory operand cannot be a empty string\n' "$PROGRAM"
		test -d "$1" || Error '%s: directory does not exist or is not a directory\n' "$PROGRAM"

		output_directory="$(cd "$1" 2> /dev/null && pwd)" \
			|| Error '%s: permission denied for specified directory\n' "$PROGRAM"
		;;
	(*)
		Error '%s: too many directory operands\n' "$PROGRAM"
		;;

esac

output_directory="${output_directory%/}"

test -n "$input_file" || Error '%s: missing file argument\n' "$PROGRAM"
test "$input_file" != "NULL" || Error '%s: file argument cannot be a empty string\n' "$PROGRAM"
test -f "$input_file" || Error '%s: file operand does not exist or is not a regular file\n' "$PROGRAM"

case "$input_file" in
	(/*) ;;
	(./*) input_file="$(pwd)/${input_file#*\./}" ;;
	(*) input_file="$(pwd)/${input_file}" ;;
esac

if test "${input_file%/*}" = "$output_directory"; then
	Error '%s: input and output can not be in the same dirctory\n' "$PROGRAM"
fi

input_directory="${input_file%/*}" input_file="${input_file##*/}"

case "$input_file" in
	(VID_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9][0-9][0-9].mp4) ;;
	(*) Error '%s: invalid file operand\n' "$PROGRAM" ;;
esac

file_date_time=${input_file}
file_date_time=${file_date_time#VID_}
file_date_time=${file_date_time%.mp4}
file_date=${file_date_time%_*} file_time=${file_date_time#*_}

year=${file_date%????} month=${file_date#????} day=${file_date#??????}; month=${month%??}
hour=${file_time%????} minute=${file_time#??} second=${file_time#????}; minute=${minute%??}

month=${month#0} day=${day#0} hour=${hour#0} minute=${minute#0} second=${second#0}

case "$rotate_video" in
	('') unset rotate_video ;;
	(NULL) rotate_video= ;;
	([0-9]|[1-9][0-9]|[12][0-9][0-9]|3[0-5][0-9]|360) ;;
	(*) Error '%s: invalid rotation operand\n' "$PROGRAM" ;;
esac

case "$start_position" in
	('')
		unset start_position start_display
		;;
	([0-9]|[0-9][0-9]|[0-9][0-9]:[0-9][0-9])
		IFS=:; set -- $start_position
		IFS="$DEFAULT_IFS"

		case $# in
			(1)
				start_minute=0 start_second="$1"
				start_second="${start_second#0}"
				;;
			(2)
				start_minute="$1" start_second="$2"
				start_minute="${start_minute#0}" start_second="${start_second#0}"
				;;
		esac

		start_minute="$((start_minute * 60))"
		start_time="$((start_minute + start_second))"
		second="$((second + start_time))"

		until test $second -lt 60; do second="$((second - 60))" minute="$((minute + 1))"; done
		until test $minute -lt 60; do minute="$((minute - 60))" hour="$((hour + 1))"; done
		until test $hour -lt 24; do hour="$((hour - 24))" day="$((day + 1))"; done

		case "$start_position" in
			([0-9]|[0-9][0-9]) start_display="${start_position}s" ;;
			([0-9][0-9]:[0-9][0-9]) start_display="${start_position}" ;;
		esac
		;;
	(*)
		Error '%s: invalid start argument (hint: <MM>:<SS> or <SS>)\n' "$PROGRAM"
		;;
esac

case "$end_position" in
	('')
		unset end_position duration_time end_display
		;;
	([0-9]|[0-9][0-9]|[0-9][0-9]:[0-9][0-9])
		IFS=:; set -- $end_position
		IFS="$DEFAULT_IFS"

		case $# in
			(1)
				end_minute=0 end_second="$1"
				end_second="${end_second#0}"
				;;
			(2)
				end_minute="$1" end_second="$2"
				end_minute="${end_minute#0}" end_second="${end_second#0}"
				;;
		esac


		end_minute="$((end_minute * 60))"
		duration_time="$((end_minute + end_second - ${start_time:-0}))"

		case "$end_position" in
			([0-9]|[0-9][0-9]) end_display="${end_position}s" ;;
			([0-9][0-9]:[0-9][0-9]) end_display="${end_position}" ;;
		esac
		;;
	(*)
		Error '%s: invalid end argument (hint: <MM>:<SS> or <SS>)\n' "$PROGRAM"
		;;
esac

case "$month" in ([0-9]) month="0${month}" ;; esac
case "$day" in ([0-9]) day="0${day}" ;; esac
case "$hour" in ([0-9]) hour="0${hour}" ;; esac
case "$minute" in ([0-9]) minute="0${minute}" ;; esac
case "$second" in ([0-9]) second="0${second}" ;; esac

input_file="$input_directory/$input_file"
output_file="${output_directory%/}/VID_${year}${month}${day}_${hour}${minute}${second}.mp4"

printf '\n%8s: %s' "Input" "$input_file" "Output" "$output_file"

if test -n "$start_display" && test -n "$end_display"; then
	printf '\n%8s: %-10s%s: %s (%ss)\n\n' "Start" "$start_display" "End" "$end_display" "$duration_time"
elif test -n "$start_display"; then
	printf '\n%8s: %s\n\n' "Start" "$start_display"
elif test -n "$end_display"; then
	printf '\n%8s: %s\n\n' "End" "$end_display"
else
	printf '\n\n'
fi

set -- ffmpeg \
	-loglevel warning -stats \
	${assume_yes:+-y} -i "$input_file" \
	${start_position:+-ss $start_position} \
	${end_position:+-to $end_position} \
	-c copy -map_metadata -1  \
	${rotate_video+-metadata:s:v rotate=$rotate_video} \
	-async 1 "$output_file"

test -n "$assume_yes" && exec "$@"

printf 'Do you want to run command? [Y/n]: ' >&2
read -r user_input
case "$user_input" in (''|[Yy]|[Yy][Ee][Ss]) exec "$@" ;; esac
