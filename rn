#!/bin/sh
# The 'github.com/thameera/vimv' script but rewritten in sh.

set -e

if [ $# -eq 0 ]; then
    IFS='
'
    ls_output="$(ls -1)"
    set -- $ls_output
    if [ $# -eq 0 ]; then
        printf "%s: current directory is empty\n" "${0##*/}" >&2
        exit 1
    fi
fi

IFS=' '
case "$*" in
    *'
'*)
        printf "%s: argument(s) contains a newline\n" "${0##*/}" >&2
        exit 1
        ;;
esac

filenames_file="${TMPDIR:-/tmp}/${0##*/}.$$"
trap 'rm -f "$filenames_file"' EXIT

printf "%s\n" "$@" > "$filenames_file"
${EDITOR:-vi} "$filenames_file"

files_in=$#
files_out=0
while read -r output; do
    files_out="$(($files_out + 1))"
done < "$filenames_file"

if [ "$files_in" -ne "$files_out" ]; then
    printf "%s: added/deleted lines\n" "${0##*/}" >&2
    exit 1
fi

renamed_files=0
while read -r output; do
    if [ "$1" != "$output" ]; then
        set -- "$@" "$1" "$output"
        renamed_files="$(($renamed_files + 1))"
    fi
    shift 1
done < "$filenames_file"

if [ "$renamed_files" -eq 0 ]; then
    printf "%s: no filenames were changed\n" "${0##*/}" >&2
    exit 1
fi

until [ $# -eq 0 ]; do
    case "$2" in
        */*) [ -d "${2%/*}" ] || mkdir -p "${2%/*}" ;;
    esac
    if git ls-files --error-unmatch "$1" > /dev/null 2>&1; then
        git mv -- "$1" "$2"
    else
        mv -- "$1" "$2"
    fi
    shift 2
done

printf "%s file(s) renamed.\n" "$renamed_files"
