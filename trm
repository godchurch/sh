#!/bin/sh

set -e

USAGE="Usage: %s -i VID_XXXXXXXX_XXXXXX.mp4 [-s [mm:]ss] [-t [mm:]ss] [-r rotation] [directory]"

error () { printf "%s: %s\n" "${0##*/}" "$1" 1>&2; exit 1; }
usage () { printf "$USAGE\n" "${0##*/}" 1>&2; exit 0; }

media_converter="$(command -p -v ffmpeg)" || error "command not found -- ffmpeg"

unset input rotate assume_yes start display_start end display_duration display_end
while getopts :hi:s:t:r:y option; do
    case "$option" in
        h) usage ;;
        i) input="$OPTARG" ;;
        s) start="$OPTARG" ;;
        t) end="$OPTARG" ;;
        r) rotate="$OPTARG" ;;
        y) assume_yes="-y" ;;
        :) error "option requires an argument -- $OPTARG" ;;
        ?) error "illegal argument -- $OPTARG" ;;
    esac
done
shift $(($OPTIND - 1))

[ $# -le 1 ] || error "too many directory operands"
[ $# -lt 1 ] && set -- '.'

[ -n "${input+x}" ] || error "input file not specified"
[ -f "$input" ] || error "file does not exist or is not a regular file -- $input"
[ -r "$input" ] || error "unable to read file -- $input"

case "${input##*/}" in
    VID_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9][0-9][0-9].mp4) ;;
    *) error "invalid file operand" ;;
esac

case "$input" in
    */*) input_folder="${input%/*}" input_file="${input##*/}" ;;
    *) input_folder="." input_file="$input" ;;
esac

[ -d "$1" ] || error "directory does not exist or is not a directory"
[ -w "$1" ] || error "permission denied for output directory"

case "$1" in
    /) output_folder="$1" ;;
    *) output_folder="${1%/}" ;;
esac

input_string="$(cd "$input_folder" && pwd)"
output_string="$(cd "$output_folder" && pwd)"
[ "$input_string" != "$output_string" ] || error "input can not be in output directory"

unset count prefix suffix year month day hour minute second

string="$input_file"
while [ "${#string}" -ge 1 ]; do
    count="$((${count-0} + 1))"
    modded_string="${string#?}"
    character="${string%$modded_string}"
    string="$modded_string"
    case "$count" in
        [123]) prefix="$prefix$character" ;;
        [5678]) year="$year$character" ;;
        9|10) month="$month$character" ;;
        1[12]) day="$day$character" ;;
        1[45]) hour="$hour$character" ;;
        1[67]) minute="$minute$character" ;;
        1[89]) second="$second$character" ;;
        2[123]) suffix="$suffix$character" ;;
    esac
done

case "$month" in 0[0-9]) month="${month#0}" ;; esac
case "$day" in 0[0-9]) day="${day#0}" ;; esac
case "$hour" in 0[0-9]) hour="${hour#0}" ;; esac
case "$minute" in 0[0-9]) minute="${minute#0}" ;; esac
case "$second" in 0[0-9]) second="${second#0}" ;; esac

if [ -n "${start+x}" ]; then
    case "$start" in
        [0-9]|[0-9][0-9]|[0-9][0-9]:[0-9][0-9]) ;;
        *) error "invalid start argument (hint: <mm>:<ss> or <ss>)" ;;
    esac

    case "$start" in
        *:*) start_minute="${start%:*}" start_second="${start#*:}" ;;
        *) start_minute=0 start_second="$start" ;;
    esac

    case "$start_minute" in 0[0-9]) start_minute="${start_minute#0}" ;; esac
    case "$start_second" in 0[0-9]) start_second="${start_second#0}" ;; esac

    start_minute="$(($start_minute * 60))"
    start_time="$(($start_minute + $start_second))"
    second="$(($second + $start_time))"

    until test $second -lt 60; do second="$(($second - 60))" minute="$(($minute + 1))"; done
    until test $minute -lt 60; do minute="$(($minute - 60))" hour="$(($hour + 1))"; done
    until test $hour -lt 24; do hour="$(($hour - 24))" day="$(($day + 1))"; done

    case "$start" in
        [0-9]|[0-9][0-9]) display_start="${start}s" ;;
        [0-9][0-9]:[0-9][0-9]) display_start="$start" ;;
    esac

    start="-ss $start"
fi

if [ -n "${end+x}" ]; then
    case "$end" in
        [0-9]|[0-9][0-9]|[0-9][0-9]:[0-9][0-9]) ;;
        *) error "invalid end argument (hint: <mm>:<ss> or <ss>)" ;;
    esac

    case "$end" in
        *:*) end_minute="${end%:*}" end_second="${end#*:}" ;;
        *) end_minute=0 end_second="$end" ;;
    esac

    case "$end_minute" in 0[0-9]) end_minute="${end_minute#0}" ;; esac
    case "$end_second" in 0[0-9]) end_second="${end_second#0}" ;; esac

    display_duration="$(($(($end_minute * 60)) + $end_second - ${start_time:-0}))"

    case "$end" in
        [0-9]|[0-9][0-9]) display_end="${end}s" ;;
        [0-9][0-9]:[0-9][0-9]) display_end="$end" ;;
    esac

    end="-to $end"
fi

if [ -n "${rotate+x}" ]; then
    case "$rotate" in
        [0-9]|[1-9][0-9]|[12][0-9][0-9]|3[0-5][0-9]|360) ;;
        *) error "invalid rotation operand" ;;
    esac
    rotate="-display_rotation $rotate"
fi

case "$month" in [0-9]) month="0${month}" ;; esac
case "$day" in [0-9]) day="0${day}" ;; esac
case "$hour" in [0-9]) hour="0${hour}" ;; esac
case "$minute" in [0-9]) minute="0${minute}" ;; esac
case "$second" in [0-9]) second="0${second}" ;; esac

input_file="$input"
output_file="${prefix}_${year}${month}${day}_${hour}${minute}${second}.${suffix}"
case "$output_folder" in
    \.) ;;
    \./*) output_file="${output_folder#./}/$output_file" ;;
    *) output_file="$output_folder/$output_file" ;;
esac

if [ -n "${display_start+x}" -a -n "${display_end+x}" ]; then
    printf "\n%8s: %s\n%8s: %s\n%8s: %-10s%s: %s (%ss)\n\n" Input "$input_file" Output "$output_file" Start "$display_start" End "$display_end" "$display_duration"
elif [ -n "${display_start+x}" ]; then
    printf "\n%8s: %s\n%8s: %s\n%8s: %s\n\n" Input "$input_file" Output "$output_file" Start "$display_start"
elif [ -n "${display_end+x}" ]; then
    printf "\n%8s: %s\n%8s: %s\n%8s: %s\n\n" Input "$input_file" Output "$output_file" End "$display_end"
else
    printf "\n%8s: %s\n%8s: %s\n\n" Input "$input_file" Output "$output_file"
fi

if [ ! -n "${assume_yes+x}" ]; then
    printf "Do you want to run command? [Y/n]: "
    read -r user_reply
    case "$user_reply" in
        ''|[Yy]|[Yy][Ee][Ss]) ;;
        *) exit 0 ;;
    esac
fi

echo exec "$media_converter" \
    -loglevel warning -stats ${rotate-} ${start-} ${end-} -i "$input_file" \
    -codec copy -map_metadata -1 -async 1 ${assume_yes-} "$output_file"
