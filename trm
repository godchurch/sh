#!/bin/sh

set -e

usage="Usage: ${0##*/} [-d directory] [-s [mm:]ss] [-t [mm:]ss] [-r rotation] VID_XXXXXXXX_XXXXXX.mp4"

exit_shell ()
{
    exit_code="$1"; shift 1
    case "$exit_code" in
        0) printf "%s\n" "$*" ;;
        *) printf "%s\n" "$*" 1>&2 ;;
    esac
    exit "$exit_code"
}

media_converter="$(command -p -v ffmpeg)" ||
    exit_shell 127 "${0##*/}: command not found -- ffmpeg"

unset directory rotate assume_yes start display_start end display_duration display_end
while getopts :hd:s:t:r:y option; do
    case "$option" in
        h) exit_shell 0 "$usage" ;;
        d) directory="$OPTARG" ;;
        s) start="$OPTARG" ;;
        t) end="$OPTARG" ;;
        r) rotate="$OPTARG" ;;
        y) assume_yes="-y" ;;
        :) exit_shell 1 "${0##*/}: option requires an argument -- $OPTARG" ;;
        \?) exit_shell 1 "${0##*/}: illegal argument -- $OPTARG" ;;
    esac
done
shift $(($OPTIND - 1))

if [ $# -eq 1 ]; then
    [ -e "$1" ] || exit_shell 1 "${0##*/}: file does not exist -- $1"
    [ -f "$1" ] || exit_shell 1 "${0##*/}: file is not a regular file -- $1"
    [ -r "$1" ] || exit_shell 1 "${0##*/}: unable to read file -- $1"
else
    [ $# -lt 1 ] && exit_shell 1 "${0##*/}: missing file operand"
    [ $# -gt 1 ] && exit_shell 1 "${0##*/}: too many file operands"
fi

pattern_check () { case "$2" in $1) : ;; *) ! : ;; esac; }
pattern="VID_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9][0-9][0-9].mp4"
pattern_check "$pattern" "${1##*/}" || exit_shell 1 "${0##*/}: invalid file operand -- $1"

case "$1" in
    ./*/*) set -- "${1#./}"; set -- "${1%/*}" "${1##*/}" ;;
    ./*) set -- "." "${1#./}" ;;
    /*/*) set -- "${1%/*}" "${1##*/}" ;;
    /*) set -- "/" "${1##*/}" ;;
    */*) set -- "${1%/*}" "${1##*/}" ;;
    *) set -- "." "$1" ;;
esac

if [ -n "${directory+x}" ]; then
    case "$directory" in
        /) set -- "$1" "$2" "/" ;;
        ./) set -- "$1" "$2" "." ;;
        ./*) set -- "$1" "$2" "${directory#./}"; set -- "$1" "$2" "${3%/}" ;;
        *) set -- "$1" "$2" "${directory%/}" ;;
    esac
    [ -e "$3" ] || exit_shell 1 "${0##*/}: specified directory does not exist -- $3"
    [ -d "$3" ] || exit_shell 1 "${0##*/}: specified directory is not a directory -- $3"
    [ -w "$3" ] || exit_shell 1 "${0##*/}: write permission denied -- $3"
else
    set -- "$1" "$2" "."
    [ -w "$3" ] || exit_shell 1 "${0##*/}: write permission denied for current directory"
fi

input_string="$(cd "$1" && pwd)"
output_string="$(cd "$3" && pwd)"
if [ "$input_string" = "$output_string" ]; then
    exit_shell 1 "${0##*/}: input can not be inside of output directory"
fi

unset prefix suffix year month day hour minute second

string="$2"
until [ "${#string}" -eq 0 ]; do
    character="${string%${string#?}}"
    string="${string#?}"
    case "${#string}" in
        2[210]) prefix="${prefix-}$character" ;;
        1[8765]) year="${year-}$character" ;;
        1[43]) month="${month-}$character" ;;
        1[21]) day="${day-}$character" ;;
        [98]) hour="${hour-}$character" ;;
        [76]) minute="${minute-}$character" ;;
        [54]) second="${second-}$character" ;;
        [210]) suffix="${suffix-}$character" ;;
    esac
done

case "$month" in 0[0-9]) month="${month#0}" ;; esac
case "$day" in 0[0-9]) day="${day#0}" ;; esac
case "$hour" in 0[0-9]) hour="${hour#0}" ;; esac
case "$minute" in 0[0-9]) minute="${minute#0}" ;; esac
case "$second" in 0[0-9]) second="${second#0}" ;; esac

if [ -n "${start+x}" ]; then
    case "$start" in
        [0-9]|[0-9][0-9]|[0-9][0-9]:[0-9][0-9]) ;;
        *) exit_shell 1 "${0##*/}: invalid start operand -- $start" ;;
    esac

    case "$start" in
        *:*) start_minute="${start%:*}" start_second="${start#*:}" ;;
        *) start_minute=0 start_second="$start" ;;
    esac

    case "$start_minute" in 0[0-9]) start_minute="${start_minute#0}" ;; esac
    case "$start_second" in 0[0-9]) start_second="${start_second#0}" ;; esac

    start_minute="$(($start_minute * 60))"
    start_time="$(($start_minute + $start_second))"
    second="$(($second + $start_time))"

    until test $second -lt 60; do second="$(($second - 60))" minute="$(($minute + 1))"; done
    until test $minute -lt 60; do minute="$(($minute - 60))" hour="$(($hour + 1))"; done
    until test $hour -lt 24; do hour="$(($hour - 24))" day="$(($day + 1))"; done

    case "$start" in
        [0-9]|[0-9][0-9]) display_start="${start}s" ;;
        [0-9][0-9]:[0-9][0-9]) display_start="$start" ;;
    esac

    start="-ss $start"
fi

if [ -n "${end+x}" ]; then
    case "$end" in
        [0-9]|[0-9][0-9]|[0-9][0-9]:[0-9][0-9]) ;;
        *) exit_shell 1 "${0##*/}: invalid end operand -- $end" ;;
    esac

    case "$end" in
        *:*) end_minute="${end%:*}" end_second="${end#*:}" ;;
        *) end_minute=0 end_second="$end" ;;
    esac

    case "$end_minute" in 0[0-9]) end_minute="${end_minute#0}" ;; esac
    case "$end_second" in 0[0-9]) end_second="${end_second#0}" ;; esac

    display_duration="$(($(($end_minute * 60)) + $end_second - ${start_time:-0}))"

    case "$end" in
        [0-9]|[0-9][0-9]) display_end="${end}s" ;;
        [0-9][0-9]:[0-9][0-9]) display_end="$end" ;;
    esac

    end="-to $end"
fi

if [ -n "${rotate+x}" ]; then
    case "$rotate" in
        [0-9]|[1-9][0-9]|[12][0-9][0-9]|3[0-5][0-9]|360) ;;
        *) exit_shell 1 "${0##*/}: invalid rotation operand -- $rotate" ;;
    esac
    rotate="-display_rotation $rotate"
fi

case "$month" in [0-9]) month="0${month}" ;; esac
case "$day" in [0-9]) day="0${day}" ;; esac
case "$hour" in [0-9]) hour="0${hour}" ;; esac
case "$minute" in [0-9]) minute="0${minute}" ;; esac
case "$second" in [0-9]) second="0${second}" ;; esac

case "$1" in
    .) input="$2" ;;
    /) input="/$2" ;;
    *) input="$1/$2" ;;
esac
set -- "$1" "$2" "$3" "${prefix}_${year}${month}${day}_${hour}${minute}${second}.${suffix}"
case "$3" in
    .) output="$4" ;;
    /) output="/$4" ;;
    *) output="$3/$4" ;;
esac

if [ -n "${display_start+x}" -a -n "${display_end+x}" ]; then
    printf "\n%8s: %s\n%8s: %s\n%8s: %-10s%s: %s (%ss)\n\n" Input "$input" Output "$output" Start "$display_start" End "$display_end" "$display_duration"
elif [ -n "${display_start+x}" ]; then
    printf "\n%8s: %s\n%8s: %s\n%8s: %s\n\n" Input "$input" Output "$output" Start "$display_start"
elif [ -n "${display_end+x}" ]; then
    printf "\n%8s: %s\n%8s: %s\n%8s: %s\n\n" Input "$input" Output "$output" End "$display_end"
else
    printf "\n%8s: %s\n%8s: %s\n\n" Input "$input" Output "$output"
fi

if [ ! -n "${assume_yes+x}" ]; then
    printf "Do you want to run command? [Y/n]: "
    read -r user_reply
    case "$user_reply" in
        ''|[Yy]|[Yy][Ee][Ss]) ;;
        *) exit 0 ;;
    esac
fi

exec "$media_converter" \
    -loglevel warning -stats ${rotate-} -i "$input" \
    ${start-} ${end-} -codec copy -map_metadata -1 -async 1 ${assume_yes-} "$output"
