#!/usr/bin/sh

set -eu

usage () {
    printf "Usage: %s" "${0##*/}" >&2
    printf " [-h]" >&2
    printf " [-d directory]" >&2
    printf " [-s [mm:]ss]" >&2
    printf " [-t [mm:]ss]" >&2
    printf " [-r rotation]" >&2
    printf " VID_XXXXXXXX_XXXXXX.mp4" >&2
    printf "\n" >&2
    exit 0
}
quit () {
    printf "%s: %s\n" "${0##*/}" "$*" >&2
    exit 1
}

PATH="/usr/bin"

unset -v folder assume_yes
unset -v start end rotate
unset -v echo_start echo_end

while getopts ":hyd:s:t:r:" option; do
    case "$option" in
        h) usage ;;
        y) assume_yes="-y" ;;
        d) folder="$OPTARG" ;;
        s) start="$OPTARG" ;;
        t) end="$OPTARG" ;;
        r) rotate="$OPTARG" ;;
        :) quit "option requires an argument -- $OPTARG" ;;
        ?) quit "illegal argument -- $OPTARG" ;;
    esac
done
shift $(($OPTIND - 1))

if [ $# -eq 1 ]; then
    [ -e "$1" ] || quit "file does not exist -- $1"
    [ -f "$1" ] || quit "file is not a regular file -- $1"
    [ -r "$1" ] || quit "unable to read file -- $1"
else
    [ $# -lt 1 ] && quit "missing file operand"
    [ $# -gt 1 ] && quit "too many file operands"
fi

input="$(realpath -- "$1")"
in_file=$(basename -- "$input")
in_folder=$(dirname -- "$input")

pattern='VID_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9][0-9][0-9].mp4'
case "$in_file" in
    $pattern) ;;
           *) quit "invalid file operand -- $input" ;;
esac

case "${folder+X}" in
    X)
        [ -e "$folder" ] || quit "directory does not exist -- $folder"
        [ -d "$folder" ] || quit "directory is not a directory -- $folder"
        [ -w "$folder" ] || quit "write permission denied -- $folder"
        ;;
    *)
        [ -w . ] || quit "write permission denied for current directory"
        folder="."
        ;;
esac

out_folder="$(realpath -- "$folder")"

case "$out_folder" in
    "$in_folder") quit "input can not be inside of output directory" ;;
esac

unset -v prefix suffix
unset -v year month day
unset -v hour minute second

string="$in_file"
until [ "${#string}" -eq 0 ]; do
    character="${string%${string#?}}"
    string="${string#?}"
    case "${#string}" in
        2[210]) prefix="${prefix-}$character" ;;
        1[8765]) year="${year-}$character" ;;
        1[43]) month="${month-}$character" ;;
        1[21]) day="${day-}$character" ;;
        [98]) hour="${hour-}$character" ;;
        [76]) minute="${minute-}$character" ;;
        [54]) second="${second-}$character" ;;
        [210]) suffix="${suffix-}$character" ;;
    esac
done

case "$month" in 0?) month="${month#0}" ;; esac
case "$day" in 0?) day="${day#0}" ;; esac
case "$hour" in 0?) hour="${hour#0}" ;; esac
case "$minute" in 0?) minute="${minute#0}" ;; esac
case "$second" in 0?) second="${second#0}" ;; esac

case "${start+X}" in
    X)
        case "$start" in
            [0-9]) echo_start="00:0$start" ;;
            [0-5][0-9]) echo_start="00:$start" ;;
            [0-5][0-9]:[0-5][0-9]) echo_start="$start" ;;
            *) quit "invalid start operand -- $start" ;;
        esac

        start="-ss $echo_start"
        start_minute="${echo_start%:*}"
        start_second="${echo_start#*:}"

        case "$start_minute" in 0?) start_minute="${start_minute#0}" ;; esac
        case "$start_second" in 0?) start_second="${start_second#0}" ;; esac

        second=$(($start_minute * 60 + $start_second + $second))
        while [ $second -ge 60 ]; do second=$(($second - 60)) minute=$(($minute + 1)); done
        while [ $minute -ge 60 ]; do minute=$(($minute - 60)) hour=$(($hour + 1)); done
        while [ $hour -ge 24 ]; do hour=$(($hour - 24)) day=$(($day + 1)); done
        ;;
esac

case "${end+X}" in
    X)
        case "$end" in
            [0-9]) echo_end="00:0$end" ;;
            [0-5][0-9]) echo_end="00:$end" ;;
            [0-5][0-9]:[0-5][0-9]) echo_end="$end" ;;
            *) quit "invalid end operand -- $end" ;;
        esac
        end="-to $echo_end"
        ;;
esac

case "${rotate+X}" in
    X)
        case "$rotate" in
            [0-9]) ;;
            [1-9][0-9]) ;;
            [12][0-9][0-9]) ;;
            3[0-5][0-9]) ;;
            *) quit "invalid rotation operand -- $rotate" ;;
        esac
        rotate="-display_rotation $rotate"
        ;;
esac

case "$month" in ?) month="0$month" ;; esac
case "$day" in ?) day="0$day" ;; esac
case "$hour" in ?) hour="0$hour" ;; esac
case "$minute" in ?) minute="0$minute" ;; esac
case "$second" in ?) second="0$second" ;; esac

out_file="${prefix}_${year}${month}${day}_${hour}${minute}${second}.${suffix}"
case "$out_folder" in
    /) output="/$out_file" ;;
    *) output="$out_folder/$out_file" ;;
esac

echo_pwd="$(pwd -P)"
case "$input" in
    "$echo_pwd"/*) set -- Input "${input#${echo_pwd}/}" ;;
                *) set -- Input "$input" ;;
esac
case "$output" in
    "$echo_pwd"/*) set -- "$@" Output "${output#${echo_pwd}/}" ;;
                *) set -- "$@" Output "$output" ;;
esac
case "${echo_start+X}${echo_end+Y}" in
    XY) set -- "$@" Trim "$echo_start -> $echo_end" ;;
    X) set -- "$@" Trim "$echo_start -> END" ;;
    Y) set -- "$@" Trim "START -> $echo_end" ;;
esac

printf "\n"; printf "%8s - %s\n" "$@"; printf "\n"
case "${assume_yes+X}" in
    X)
        ;;
    *)
        printf "Do you want to run command? [Y/n]: "
        read -r user_reply
        case "$user_reply" in ''|[Yy]|[Yy][Ee][Ss]) ;; *) exit 0 ;; esac
        ;;
esac

exec ffmpeg -loglevel warning -stats ${rotate-} -i "$input" -codec copy \
    -map_metadata -1 -async 1 ${start-} ${end-} ${assume_yes-} "$output"
