# Function: MountFileSystem

if test "`id -u`" -ne 0; then
  printf 'E: Function: MountFileSystem: Loading failed: Permission denied\n' >&2
  test -z "$PS1" && exit 1 || return 1
elif ! command -v lsblk > /dev/null; then
  printf 'E: Function: MountFileSystem: Loading failed: Missing command -- lsblk\n' >&2
  test -z "$PS1" && exit 1 || return 1
elif ! command -v mountpoint > /dev/null; then
  printf 'E: Function: MountFileSystem: Loading failed: Missing command -- mountpoint\n' >&2
  test -z "$PS1" && exit 1 || return 1
elif ! command -v mount > /dev/null; then
  printf 'E: Function: MountFileSystem: Loading failed: Missing command -- mount\n' >&2
  test -z "$PS1" && exit 1 || return 1
fi

MountFileSystem ()
{
  if test "$#" -ne 2; then
    printf 'E: Function: MountFileSystem: Invalid number of arguments\n' >&2
    return 1
  elif ! lsblk -lpndo name | grep -Fq "${1%/}"; then
    printf 'E: Function: MountFileSystem: block device not found -- %s\n' "$1" >&2
    return 1
  elif lsblk -lpno mountpoint "${1%/}" | grep -q '/'; then
    printf 'E: Function: MountFileSystem: block device already in use -- %s\n' "$1" >&2
    return 1
  elif test ! -d "$2"; then
    printf 'E: Function: MountFileSystem: directory does not exist -- %s\n' "$2" >&2
    return 1
  elif mountpoint -q "$2"; then
    printf 'E: Function: MountFileSystem: directory is already a mountpoint -- %s\n' "$2" >&2
    return 1
  elif ! mount "$1" "$2" 2> /dev/null; then
    printf 'E: Function: MountFileSystem: Unable to mount %s at %s\n' "$1" "$2" >&2
    return 1
  fi

  set -- "${2%/}" \
    'E: Function: MountFileSystem: create mountpoint -- %s\n' \
    'E: Function: MountFileSystem: mount filesystem -- %s\n' \
    'E: Function: MountFileSystem: bind filesystem -- %s\n' \
    'E: Function: MountFileSystem: make filesystem a slave -- %s\n'

  test ! -d "$1/proc" && ! mkdir "$1/proc" && { printf "$2" "$1/proc" >&2; return 1; }
    mount -t proc  proc  "$1/proc" || { printf "$3" proc  >&2; return 1; }
  test ! -d "$1/sys"  && ! mkdir "$1/sys"  && { printf "$2" "$1/sys"  >&2; return 1; }
    mount -t sysfs sysfs "$1/sys"  || { printf "$3" sysfs >&2; return 1; }
  test ! -d "$1/tmp"  && ! mkdir "$1/tmp"  && { printf "$2" "$1/tmp"  >&2; return 1; }
    mount -t tmpfs tmpfs "$1/tmp"  || { printf "$3" tmpfs >&2; return 1; }
  test ! -d "$1/run"  && ! mkdir "$1/run"  && { printf "$2" "$1/run"  >&2; return 1; }
    mount -t tmpfs run   "$1/run"  || { printf "$3" run   >&2; return 1; }

  test ! -d "$1/dev" && ! mkdir "$1/dev" && { printf "$2" "$1/dev" >&2; return 1; }
    mount --bind /dev  "$1/dev" 2> /dev/null || { printf "$4" /dev  >&2; return 1; }
    mount --make-slave "$1/dev" 2> /dev/null || { printf "$5" "$1/dev" >&2; return 1; }
  test ! -d "$1/dev/pts" && ! mkdir "$1/dev/pts" && { printf "$2" "$1/dev/pts" >&2; return 1; }
    mount --bind /dev/pts  "$1/dev/pts" 2> /dev/null || { printf "$4" /dev/pts  >&2; return 1; }
    mount --make-slave "$1/dev/pts" 2> /dev/null || { printf "$5" "$1/dev/pts" >&2; return 1; }

  test -e "$1/etc/resolv.conf" || return 0

  set -- "$1" "$1/etc/resolv.conf" "$1/run/default-resolv.conf" \
    'E: Function: MountFileSystem: Unable to create resolve file -- %s\n'
    'E: Function: MountFileSystem: Unable to create default resolve file -- %s\n'
    'E: Function: MountFileSystem: Unable to bind resolve file -- %s\n'

  if test -L "$2"; then
    set -- "$1" "`readlink "$2"`"
    case "$2" in
      /*) set -- "$1" "${1}${2}" ;;
      *) set -- "$1" "$1/etc/$2" ;;
    esac
    test -f "$2" || install -Dm644 /dev/null "$2" || { printf "$4" "$2" >&2; return 1; }
  fi

  printf 'nameserver 1.1.1.1\n' > "$3" || { printf "$5" "$3" >&2; return 1; }
  mount --bind "$3" "$2" || { printf "$6" "$3" >&2; return 1; }
}

# vi: filetype=sh
