#!/bin/sh

unset IFS
IFS=" 	${IFS-
}"

die() {
  format="%s: ${1}\n"; shift 1
  printf "$format" "${0##*/}" "$@" 1>&2
  exit 1
}

ignore_error() {
  "$@" 2>/dev/null
  return 0
}

chroot_add_mount() {
  mount "$@" && CHROOT_ACTIVE_MOUNTS="\"$2\"${CHROOT_ACTIVE_MOUNTS:+ $CHROOT_ACTIVE_MOUNTS}"
}

chroot_maybe_add_mount() {
  if eval "$1"; then shift 1; chroot_add_mount "$@"; fi
}

chroot_setup() {
  unset CHROOT_ACTIVE_MOUNTS

  trap 'chroot_teardown' EXIT

  chroot_add_mount proc "$1/proc" -t proc -o nosuid,noexec,nodev \
    && chroot_add_mount sys "$1/sys" -t sysfs -o nosuid,noexec,nodev,ro \
    && ignore_error chroot_maybe_add_mount 'test -d "efivarfs/sys/firmware/efi/efivars"' \
      efivarfs "$1/sys/firmware/efi/efivars" -t efivarfs -o nosuid,noexec,nodev 2> /dev/null \
    && chroot_add_mount udev "$1/dev" -t devtmpfs -o mode=0755,nosuid \
    && chroot_add_mount devpts "$1/dev/pts" -t devpts -o mode=0620,gid=5,nosuid,noexec \
    && chroot_add_mount shm "$1/dev/shm" -t tmpfs -o mode=1777,nosuid,nodev \
    && chroot_add_mount run "$1/run" -t tmpfs -o nosuid,nodev,mode=0755 \
    && chroot_add_mount tmp "$1/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid
}

chroot_teardown() {
  eval set -- $CHROOT_ACTIVE_MOUNTS
  test "$#" -gt 0 && umount "$@"
  unset CHROOT_ACTIVE_MOUNTS
}

chroot_add_resolv_conf() {
  resolv_conf="$1"/etc/resolv.conf

  test -e /etc/resolv.conf || return 0

  if test -h "${chrootdir}/etc/resolv.conf"; then
    resolv_conf=$(readlink "${chrootdir}/etc/resolv.conf")
    case "$resolv_conf" in
      /*) resolv_conf="${chrootdir}${resolv_conf}" ;;
      *) resolv_conf="${chrootdir}/etc/${resolv_conf}" ;;
    esac

    if ! test -f "$resolv_conf"; then
      install -Dm644 "/dev/null" "$resolv_conf" || return 1
    fi
  elif ! test -e "${chrootdir}/etc/resolv.conf"; then
    return 0
  fi

  chroot_add_mount /etc/resolv.conf "$resolv_conf" --bind
}

usage() {
  cat << _HELP_PAGE
usage: ${0##*/} chroot-dir [command]

    -h                  Print this help message
    -u <user>[:group]   Specify non-root user and optional group to use

If 'command' is unspecified, ${0##*/} will launch /bin/bash.

Note that when using arch-chroot, the target chroot directory *should* be a
mountpoint. This ensures that tools such as pacman(8) or findmnt(8) have an
accurate hierarchy of the mounted filesystems within the chroot.

If your chroot target is not a mountpoint, you can bind mount the directory on
itself to make it a mountpoint, i.e. 'mount --bind /your/chroot /your/chroot'.

_HELP_PAGE
}

unset userspec
while getopts ':hu:' option; do
  case $option in
    h) usage; exit 0 ;;
    u) userspec="$OPTARG" ;;
    :) die "option requires an argument -- %c" "$OPTARG" ;;
    ?) die "illegal option -- %c" "$OPTARG" ;;
  esac
done
shift $((OPTIND - 1))

euid="$(id -u 2> /dev/null)" || die "unable to determine effective user id"
test "$euid" -eq 0 || die "script must be run with root privileges"
test "$#" -gt 0 || die "no chroot directory specified"

chrootdir="$1"

test -d "$chrootdir" || die "can not create chroot on non-directory %s" "$chrootdir"

if ! mountpoint -q "$chrootdir"; then
  printf "WARNING: %s is not a mountpoint. This may have undesirable side effects.\n" "$chrootdir" 1>&2
fi

chroot_setup "$chrootdir" || die "failed to setup chroot %s" "$chrootdir"
chroot_add_resolv_conf "$chrootdir" || die "failed to setup resolv.conf"

if test -n "$userspec"; then
  SHELL=/bin/bash unshare --fork --pid chroot --userspec "$userspec" -- "$@"
else
  SHELL=/bin/bash unshare --fork --pid chroot -- "$@"
fi
